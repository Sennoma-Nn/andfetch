#!/data/data/com.termux/files/usr/bin/env nu

def get_ascii_colors [ icon ] {
    let icon_key = $icon  | str downcase

    let colors = {
        oneplus: ["\e[31m", "", "", ""]
        xiaomi: ["\e[38;2;255;103;0m", "", "", ""]
        redmi: ["\e[38;2;255;103;0m", "", "", ""]
        oppo: ["\e[32m", "", "", ""]
        google: ["\e[31m", "\e[33m", "\e[32m", "\e[34m"]
        vivo: ["\e[34m", "\e[37m", "", ""]
        huawei: ["\e[31m", "", "", ""]
        realme: ["\e[33m", "", "", ""]
    }

    if ($icon_key in $colors) {
        echo $colors | get $icon_key
    } else {
        echo ["\e[0m", "", "", ""]
    }
}

def get_ascii_icon [ icon ] {
    let icon_key = $icon  | str downcase
    let icon_colors = get_ascii_colors $icon_key
    let ascii_icons = {

oneplus: 
$"($icon_colors.0)                      ██    
($icon_colors.0)                      ██    
($icon_colors.0)████████████████  ██████████
($icon_colors.0)██                    ██    
($icon_colors.0)██                    ██    
($icon_colors.0)██      █████               
($icon_colors.0)██         ██         ██    
($icon_colors.0)██         ██         ██    
($icon_colors.0)██         ██         ██    
($icon_colors.0)██         ██         ██    
($icon_colors.0)██      ████████      ██    
($icon_colors.0)██                    ██    
($icon_colors.0)██                    ██    
($icon_colors.0)████████████████████████    
\e[0m                            "

xiaomi: 
$"($icon_colors.0) .llllllllllllllllllllllllllllllll. 
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)lllllll              'lll    lllllll
($icon_colors.0)lllllll    lllllll.    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0) 'llllllllllllllllllllllllllllllll' 
\e[0m                                    "

redmi: 
$"($icon_colors.0) .llllllllllllllllllllllllllllllll. 
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)lllllll              'lll    lllllll
($icon_colors.0)lllllll    lllllll.    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0) 'llllllllllllllllllllllllllllllll' 
\e[0m                                    "

oppo: 
$"($icon_colors.0)      .~:!7?JJ??79~.      
($icon_colors.0)   .QYPGBBGGPPGGGBBG5P.   
($icon_colors.0) .?GBBP?~'      '~7YGBGY. 
($icon_colors.0)~5BBG~              ~5BBG~
($icon_colors.0)6BGB~                ~GGB5
($icon_colors.0)6BGB~                ~PGB5
($icon_colors.0)~PBBP~              ~YBBG~
($icon_colors.0) 'JGBB57~.      .~!JGBB5' 
($icon_colors.0)   '7YGBBGGPPPPPGBBG5?'   
($icon_colors.0)      '~!7JJYYJJ?!~'      
\e[0m                          "

google: 
$"($icon_colors.0)             ......            
($icon_colors.0)        .:-==========-:.       
($icon_colors.1)     .($icon_colors.0)-==================:     
($icon_colors.1)   .-===($icon_colors.0)================:'     
($icon_colors.1)  :=======($icon_colors.0)-:'      .:-:        
($icon_colors.1) -#+====-'                     
($icon_colors.1).####*+-                       
($icon_colors.1)-######         ($icon_colors.3)==============-
($icon_colors.1)=#####+         ($icon_colors.3)=+++++++++++++=
($icon_colors.1)-######         ($icon_colors.3)=============+-
($icon_colors.1).####*+-               ($icon_colors.3).=+===+:
($icon_colors.1) -#+===+=.             ($icon_colors.3)-+===+= 
($icon_colors.1)  :=+===++($icon_colors.2)-:.      .:-($icon_colors.3)=+===+=  
($icon_colors.1)   '-++=($icon_colors.2)===++======++===($icon_colors.3)=++-   
($icon_colors.1)     '($icon_colors.2)-=+++==========+++=-($icon_colors.3)'    
($icon_colors.2)        ':-==========-:'       
($icon_colors.2)             ''''''            
\e[0m                               "

vivo: 
$"($icon_colors.0) .--========================--. 
($icon_colors.0):==============================:
($icon_colors.0)-==============================-
($icon_colors.0)-==============================-
($icon_colors.0)-==============================-
($icon_colors.0)-==-($icon_colors.1)#@@@#($icon_colors.0)--==========--($icon_colors.1)#@@@#($icon_colors.0)-==-
($icon_colors.0)-===-($icon_colors.1)#@@@%-($icon_colors.0)-========-($icon_colors.1)-%@@@#($icon_colors.0)-===-
($icon_colors.0)-====-($icon_colors.1)*@@@@+($icon_colors.0)-======-($icon_colors.1)+@@@@*($icon_colors.0)-====-
($icon_colors.0)-=====-($icon_colors.1)+@@@@*($icon_colors.0)-====-($icon_colors.1)*@@@@+($icon_colors.0)-=====-
($icon_colors.0)-======-($icon_colors.1)-%@@@#($icon_colors.0)----($icon_colors.1)#@@@%-($icon_colors.0)-======-
($icon_colors.0)-=======--($icon_colors.1)#@@@%==%@@@#($icon_colors.0)--=======-
($icon_colors.0)-=========-($icon_colors.1)*@@@@@@@@*($icon_colors.0)-=========-
($icon_colors.0)-==========-($icon_colors.1)-#%@@%#-($icon_colors.0)-==========-
($icon_colors.0)-==============================-
($icon_colors.0):==============================:
($icon_colors.0) '--========================--' 
\e[0m                                "

huawei: 
$"($icon_colors.0)          :+*#.  .#*+:          
($icon_colors.0)         *@@@@#  #@@@@*         
($icon_colors.0)    =+  :@@@@@@..@@@@@@:  +=    
($icon_colors.0)   *@@#: %@@@@@--@@@@@% :%@@*   
($icon_colors.0)  -@@@@@-:@@@@@==@@@@@:-@@@@@-  
($icon_colors.0)  .@@@@@@+-@@@@==@@@@-+@@@@@@.  
($icon_colors.0)=+::+%@@@@*-@@@==@@@-*@@@@%+::+=
($icon_colors.0)#@@%*=+*%@@%-#@--@#-%@@%*+=*%@@#
($icon_colors.0)'%@@@@@#*+*%%:*::*:%%*+*#@@@@@%'
($icon_colors.0)  =*#%%@@%*==:    :==*%@@%%#*=  
($icon_colors.0)   :+****##*-      -*##****+:   
($icon_colors.0)    =%@@%*-          -*%@@%=    
\e[0m                                "

realme: 
$"($icon_colors.0)+*************+=.     
($icon_colors.0)*#############%@@@#-  
($icon_colors.0)                .+@@* 
($icon_colors.0)                  .@@+
($icon_colors.0)#@@@@@@@@@@@@*     *@%
($icon_colors.0)%@###########-     %@*
($icon_colors.0)#@*              -%@# 
($icon_colors.0)#@*    -*******#@@%=  
($icon_colors.0)#@*    *@@#*###*='    
($icon_colors.0)#@*    .*@#:          
($icon_colors.0)#@*      :%@#:        
($icon_colors.0)#@*        -@@*.      
($icon_colors.0)#@*          =@@+     
($icon_colors.0)#@*            +@@=   
($icon_colors.0)%@#             .*@%- 
($icon_colors.0)=+-               :+*:
\e[0m                      "

    }
    if ($icon_key in $ascii_icons) {
        echo $ascii_icons | get $icon_key
    } else {
        echo ""
    }
}

def mfr_info [] {
    let mfr = (getprop ro.product.manufacturer)
    echo $mfr
}

def rooted_info [] {
    if ((whoami) == "root") {
        echo "rooted"
    } else {
        let root_paths = [
            "/system/bin/su"
            "/system/xbin/su"
            "/sbin/su"
        ]

        if ($root_paths | any { |it| $it | path exists }) {
            echo "su detected"
        } else {
            echo "su not detected"
        }
    }
}

def host_name_info [] {
    let host_name = (sys host | get "name")
    echo $host_name
}

def kernel_info [] {
    let kernel_release = (uname | get "kernel-release")
    echo $kernel_release
}

def version_info [] {
    echo $"Android (getprop ro.build.version.release) \((getprop ro.build.version.security_patch)\)"
}

def machine_info [] {
    let machine = (uname | get "machine")
    echo $machine
}

def cpu_info [] {
    let cpu = (open /proc/cpuinfo | lines | where $it =~ 'Hardware' | split column ': ' | get "column2" | uniq | str join ', ')
    if $cpu == "" {
        echo "\e[2mUndetectable\e[0m"
    } else {
        echo $cpu
    }
}

def memory_info [] {
    open /proc/meminfo | grep MemTotal | awk '{printf "%.2f GB", $2/1024/1024}'
}

def get_shell [] {
    let shell_path = $env.shell | split row "/"
    let path_len = $shell_path | length
    
    echo $shell_path | last
}

def color_info [type] {
    mut text = ""
    mut t = 3
    if $type == "bright" {
        $t = 9
    }

    $text += " "
    for $j in 0..7 {
        $text += $"\e[($t)($j)m•\e[0m "
    }

    echo $text
}

def show_info [ brand display_icon show_icon_info json ] {
    let colors = get_ascii_colors $display_icon
    
    let brand_mfr_info = if $brand == $"(mfr_info)" {
        echo {
            $"($colors.0)Brand&MFR": $"\e[0m($brand)"
        }
    } else {
        echo {
            $"($colors.0)Brand    ": $"\e[0m($brand)"
            $"($colors.0)MFR      ": $"\e[0m(mfr_info)"
        }
    }
    
    let info_list = if $json != true {
        echo {
            ...$brand_mfr_info
            $"($colors.0)Host     ": $"\e[0m(host_name_info)"
            $"($colors.0)Version  ": $"\e[0m(version_info)"
            $"($colors.0)Kernel   ": $"\e[0m(kernel_info)"
            $"($colors.0)Root     ": $"\e[0m(rooted_info)"
        }
    } else {
        echo {
            $"brand":   $"($brand)"
            $"mfr":     $"(mfr_info)"
            $"host":    $"(host_name_info)"
            $"version": $"(version_info)"
            $"kernel":  $"(kernel_info)"
            $"root":    $"(rooted_info)"
        }
    }

    let hardware_list = if $json != true {
        echo {
            $"($colors.0)Machine  ": $"\e[0m(machine_info)"
            $"($colors.0)CPU Model": $"\e[0m(cpu_info)"
            $"($colors.0)Memory   ": $"\e[0m(memory_info)"
        }
    } else {
        echo {
            $"machine":   $"(machine_info)"
            $"cpu-model": $"(cpu_info)"
            $"memory":    $"(memory_info)"
        }
    }
    
    let terminal_shell_list = if $json != true {
        echo {
            $"($colors.0)Shell    ": $"\e[0m(get_shell)"
            $"($colors.0)Color    ": $"(color_info 'normal')"
            $"($colors.0)Bright   ": $"(color_info 'bright')"
        }
    } else {
        echo {
            $"shell":  $"(get_shell)"
            # $"color":  $"(color_info 'normal')"
            # $"bright": $"(color_info 'bright')"
        }
    }
    
    let icon = $"(get_ascii_icon $display_icon)"
    let info_list_str = $"($info_list | table)" + "\n"
    let hardware_list_str = $"($hardware_list | table)" + "\n"
    let terminal_list_str = $"($terminal_shell_list | table)"
    let all_info = if $json != true {
        echo ($info_list_str + $hardware_list_str + $terminal_list_str)
    } else {
        let info_table = {
            "base":           $info_list
            "hardware":       $hardware_list
            "terminal-shell": $terminal_shell_list
        }
        echo $info_table
    }
    
    if $show_icon_info.icon and $show_icon_info.info {
        if $json != true {
            let icon_lines = ($icon | split row "\n")
            let info_lines = ($all_info | split row "\n")
            let max_lines = ([($icon_lines | length), ($info_lines | length)] | math max)

            let padded_icon = (
                $icon_lines
                | append (
                    1..($max_lines - ($icon_lines | length)) | each {|| 
                        $icon_lines | last
                    }
                )
            )
        
            let padded_info = (
                $info_lines
                | append (
                    1..($max_lines - ($info_lines | length)) | each {|| 
                        ""
                    }
                )
            )
        
            let icon_temp = (mktemp -t "icon.XXXXXX")
            let info_temp = (mktemp -t "info.XXXXXX")
            let icon_last_line = ($icon_lines | last)
        
            let max_lines = ([($icon_lines | length), ($info_lines | length)] | math max)
        
            let padded_icon = (
                $icon_lines
                | append (
                    1..($max_lines - ($icon_lines | length)) | each {|| 
                        $icon_last_line
                    }
                )
            )
        
            let padded_info = (
                $info_lines
                | append (
                    1..($max_lines - ($info_lines | length)) | each {|| 
                        ""
                    }
                )
            )
        
            let icon_width = (
                $icon_last_line 
                | str replace -a '\e\[[\d;]*m' ''
                | str length
            )
        
            $padded_icon | str join "\n" | save $icon_temp --raw -f
            $padded_info | str join "\n" | save $info_temp --raw -f
        
            awk -v w=$icon_width '
            NR==FNR {
                icon[FNR]=$0
                next
            }
            {
                printf "%-*s\033[0m %s\n", w, icon[FNR], $0
            }
            ' $icon_temp $info_temp
        
            rm -f $icon_temp $info_temp
        } else {
            echo {
                "icon": $icon
                ...$all_info
            } | to json
        }
    } else if $show_icon_info.icon {
        if $json != true {
            echo $icon
        } else {
            echo {
                "icon": $icon
            } | to json
        }
    } else if $show_icon_info.info {
        if $json != true {
            echo $all_info
        } else {
            echo $all_info | to json
        }
    } else {
        echo ""
    }
}

def main [
    --icon: string
    --hide_icon
    --hide_info
    --json
] {
    let os_name = $nu.os-info.name
    if (uname | get "operating-system") != "Android" {
        error make -u {
            msg: "This script is only allowed to run on Android."
        }
    }
    
    let brand = (getprop ro.product.brand)
    mut display_icon = $brand

    if $icon != null {
        $display_icon = $icon
    }
    
    mut show_icon_info = {
        icon: true
        info: true
    }

    if $hide_icon {
        $show_icon_info.icon = false
    }

    if $hide_info {
        $show_icon_info.info = false
    }

    show_info $brand $display_icon $show_icon_info $json
}
