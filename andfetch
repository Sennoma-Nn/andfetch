#!/data/data/com.termux/files/usr/bin/env nu

let andfetch_version = "0.1.0"

# Get color codes for ASCII art based on device brand
def get_ascii_colors [
    icon # Device brand name to get colors for
] {
    let icon_key = $icon  | str downcase

    let colors = {
        android: ["\e[32m", "\e[37m", "", ""]
        google: ["\e[34m", "\e[33m", "\e[32m", "\e[31m"]
        xiaomi: ["\e[38;2;255;103;0m", "", "", ""]
        redmi: ["\e[38;2;255;103;0m", "", "", ""]
        vivo: ["\e[34m", "\e[37m", "", ""]
        samsung: ["\e[34m", "\e[37m", "", ""]
        motorola: ["\e[31m", "", "", ""]
        realme: ["\e[33m", "", "", ""]
        oppo: ["\e[32m", "", "", ""]
        huawei: ["\e[31m", "", "", ""]
        oneplus: ["\e[31m", "", "", ""]
    }

    if ($icon_key in $colors) {
        echo $colors | get $icon_key
    } else {
        echo $colors | get "android"
    }
}

# Get ASCII art icon for device brand
def get_ascii_icon [
    icon # Device brand name to get icon for
] {
    let icon_key = $icon  | str downcase
    let icon_colors = get_ascii_colors $icon_key

    # The number of spaces in the last line of every ASCII icon must match its actual rendered width in the terminal
    let ascii_icons = {

android:
$"($icon_colors.0)         -o          o-
($icon_colors.0)          +hydNNNNdyh+
($icon_colors.0)        +mMMMMMMMMMMMMm+
($icon_colors.0)      `dMM($icon_colors.1)m:($icon_colors.0)NMMMMMMN($icon_colors.1):m($icon_colors.0)MMd`
($icon_colors.0)      hMMMMMMMMMMMMMMMMMMh
($icon_colors.0)  ..  yyyyyyyyyyyyyyyyyyyy  ..
($icon_colors.0).mMMm`MMMMMMMMMMMMMMMMMMMM`mMMm.
($icon_colors.0):MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:
($icon_colors.0):MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:
($icon_colors.0):MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:
($icon_colors.0):MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM:
($icon_colors.0)-MMMM-MMMMMMMMMMMMMMMMMMMM-MMMM-
($icon_colors.0) +yy+ MMMMMMMMMMMMMMMMMMMM +yy+
($icon_colors.0)      mMMMMMMMMMMMMMMMMMMm
($icon_colors.0)      `/++MMMMh++hMMMM++/`
($icon_colors.0)          MMMMo  oMMMM
($icon_colors.0)          MMMMo  oMMMM
($icon_colors.0)          oNMm-  -mMNs
                                "

google: 
$"($icon_colors.3)             ......
($icon_colors.3)        .:-==========-:.
($icon_colors.1)     .($icon_colors.3)-==================:
($icon_colors.1)   .-===($icon_colors.3)================:'
($icon_colors.1)  :=======($icon_colors.3)-:'      .:-:
($icon_colors.1) -#+====-'
($icon_colors.1).####*+-
($icon_colors.1)-######         ($icon_colors.0)==============-
($icon_colors.1)=#####+         ($icon_colors.0)=+++++++++++++=
($icon_colors.1)-######         ($icon_colors.0)=============+-
($icon_colors.1)'####*+-               ($icon_colors.0).=+===+:
($icon_colors.1) -#+===+=.             ($icon_colors.0)-+===+=
($icon_colors.1)  :=+===++($icon_colors.2)-:.      .:-($icon_colors.0)=+===+=
($icon_colors.1)   '-++=($icon_colors.2)===++======++===($icon_colors.0)=++-
($icon_colors.1)     '($icon_colors.2)-=+++==========+++=-($icon_colors.0)'
($icon_colors.2)        ':-==========-:'
($icon_colors.2)             ''''''
                               "

xiaomi: 
$"($icon_colors.0) .llllllllllllllllllllllllllllllll.
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)lllllll              'lll    lllllll
($icon_colors.0)lllllll    lllllll.    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0) 'llllllllllllllllllllllllllllllll'
                                    "

redmi: 
$"($icon_colors.0) .llllllllllllllllllllllllllllllll.
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)lllllll              'lll    lllllll
($icon_colors.0)lllllll    lllllll.    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)lllllll    ll    ll    ll    lllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0)llllllllllllllllllllllllllllllllllll
($icon_colors.0) 'llllllllllllllllllllllllllllllll'
                                    "

vivo: 
$"($icon_colors.0) .--========================--.
($icon_colors.0):==============================:
($icon_colors.0)-==============================-
($icon_colors.0)-==============================-
($icon_colors.0)-==============================-
($icon_colors.0)-==-($icon_colors.1)#@@@#($icon_colors.0)--==========--($icon_colors.1)#@@@#($icon_colors.0)-==-
($icon_colors.0)-===-($icon_colors.1)#@@@%-($icon_colors.0)-========-($icon_colors.1)-%@@@#($icon_colors.0)-===-
($icon_colors.0)-====-($icon_colors.1)*@@@@+($icon_colors.0)-======-($icon_colors.1)+@@@@*($icon_colors.0)-====-
($icon_colors.0)-=====-($icon_colors.1)+@@@@*($icon_colors.0)-====-($icon_colors.1)*@@@@+($icon_colors.0)-=====-
($icon_colors.0)-======-($icon_colors.1)-%@@@#($icon_colors.0)----($icon_colors.1)#@@@%-($icon_colors.0)-======-
($icon_colors.0)-=======--($icon_colors.1)#@@@%==%@@@#($icon_colors.0)--=======-
($icon_colors.0)-=========-($icon_colors.1)*@@@@@@@@*($icon_colors.0)-=========-
($icon_colors.0)-==========-($icon_colors.1)-#%@@%#-($icon_colors.0)-==========-
($icon_colors.0)-==============================-
($icon_colors.0):==============================:
($icon_colors.0) '--========================--'
                                "

samsung:
$"($icon_colors.0)       .================.
($icon_colors.0)    .======================.
($icon_colors.0)  .==========================.
($icon_colors.0) .=========-($icon_colors.1)%@@@@@%($icon_colors.0)-==========.
($icon_colors.0).========-($icon_colors.1)%@@@@@@@@%($icon_colors.0)-==========.
($icon_colors.0)-=======-($icon_colors.1)%@@@%($icon_colors.0)--($icon_colors.1)%@@@%($icon_colors.0)-=========-
($icon_colors.0)-=======-($icon_colors.1)%@@@@%($icon_colors.0)-===============-
($icon_colors.0)-========-($icon_colors.1)%@@@@@@%($icon_colors.0)-============-
($icon_colors.0)-===========-($icon_colors.1)%@@@@@@%($icon_colors.0)-=========-
($icon_colors.0)-=============-($icon_colors.1)%@@@@@%($icon_colors.0)-========-
($icon_colors.0)-=======-($icon_colors.1)%@@@%($icon_colors.0)-=-($icon_colors.1)%@@@%($icon_colors.0)-========-
($icon_colors.0)'========-($icon_colors.1)%@@@@@@@@@%($icon_colors.0)-========='
($icon_colors.0) '=========-($icon_colors.1)%@@@@@%($icon_colors.0)-=========='
($icon_colors.0)  '=========================='
($icon_colors.0)    '======================'
($icon_colors.0)       '================'
                                "

motorola:
$"($icon_colors.0)         ...------...
($icon_colors.0)      .-+##*''''''*##+-.
($icon_colors.0)    .+%+'            '+%+.
($icon_colors.0)   -@#'   -        -   '#@-
($icon_colors.0)  *@-    -@-      -@-    -@*
($icon_colors.0) +@:    .@@%.    .%@@.    :@+
($icon_colors.0)-@:    .@@@@@.  .@@@@@.    :@-
($icon_colors.0)=@:   .@*-'=%#..#%='-*@.   :@=
($icon_colors.0).@+   %-     *##*     -%   +@.
($icon_colors.0) *@. *+       **       +* .@*
($icon_colors.0)  #@-+                  +-@#
($icon_colors.0)   +@+.                .+@+
($icon_colors.0)    '#@-              -@#'
($icon_colors.0)      '=#*..........*#='
($icon_colors.0)         ''*======*''
                              "

realme: 
$"($icon_colors.0)+*************+=.
($icon_colors.0)*#############%@@@#-
($icon_colors.0)                .+@@*
($icon_colors.0)                  .@@+
($icon_colors.0)#@@@@@@@@@@@@*     *@%
($icon_colors.0)%@###########-     %@*
($icon_colors.0)#@*              -%@#
($icon_colors.0)#@*    -*******#@@%=
($icon_colors.0)#@*    *@@#*###*='
($icon_colors.0)#@*    .*@#:
($icon_colors.0)#@*      :%@#:
($icon_colors.0)#@*        -@@*.
($icon_colors.0)#@*          =@@+
($icon_colors.0)#@*            +@@=
($icon_colors.0)%@#             .*@%-
($icon_colors.0)=+-               :+*:
                      "

oppo: 
$"($icon_colors.0)      .~:!7?JJ??79~.
($icon_colors.0)   .QYPGBBGGPPGGGBBG5P.
($icon_colors.0) .?GBBP?~'      '~7YGBGY.
($icon_colors.0)~5BBG~              ~5BBG~
($icon_colors.0)6BGB~                ~GGB5
($icon_colors.0)6BGB~                ~PGB5
($icon_colors.0)~PBBP~              ~YBBG~
($icon_colors.0) 'JGBB57~.      .~!JGBB5'
($icon_colors.0)   '7YGBBGGPPPPPGBBG5?'
($icon_colors.0)      '~!7JJYYJJ?!~'
                          "

huawei: 
$"($icon_colors.0)          :+*#.  .#*+:
($icon_colors.0)         *@@@@#  #@@@@*
($icon_colors.0)    =+  :@@@@@@..@@@@@@:  +=
($icon_colors.0)   *@@#: %@@@@@--@@@@@% :%@@*
($icon_colors.0)  -@@@@@-:@@@@@==@@@@@:-@@@@@-
($icon_colors.0)  .@@@@@@+-@@@@==@@@@-+@@@@@@.
($icon_colors.0)=+::+%@@@@*-@@@==@@@-*@@@@%+::+=
($icon_colors.0)#@@%*=+*%@@%-#@--@#-%@@%*+=*%@@#
($icon_colors.0)'%@@@@@#*+*%%:*::*:%%*+*#@@@@@%'
($icon_colors.0)  =*#%%@@%*==:    :==*%@@%%#*=
($icon_colors.0)   :+****##*-      -*##****+:
($icon_colors.0)    =%@@%*-          -*%@@%=
                                "

oneplus: 
$"($icon_colors.0)                      ██
($icon_colors.0)                      ██
($icon_colors.0)████████████████  ██████████
($icon_colors.0)██                    ██
($icon_colors.0)██                    ██
($icon_colors.0)██      █████
($icon_colors.0)██         ██         ██
($icon_colors.0)██         ██         ██
($icon_colors.0)██         ██         ██
($icon_colors.0)██         ██         ██
($icon_colors.0)██      ████████      ██
($icon_colors.0)██                    ██
($icon_colors.0)██                    ██
($icon_colors.0)████████████████████████
                            "

    }
    if ($icon_key in $ascii_icons) {
        echo $ascii_icons | get $icon_key
    } else {
        echo $ascii_icons | get "android"
    }
}

# Get device brand information
def brand_info [] {
    let brand = (getprop ro.product.brand)
    echo $brand
}

# Get device manufacturer information
def mfr_info [] {
    let mfr = (getprop ro.product.manufacturer)
    echo $mfr
}

# Check if device is rooted
def rooted_info [] {
    try {
        let su_test = (su --version err> /dev/null)
        echo $"Rooted \(($su_test)\)"
    } catch {
        echo "Not rooted"
    }
}

# Check if device bootloader is locked
def locked_info [] {
    let locked = (getprop ro.boot.flash.locked)
    if $locked == "1" {
        echo "Locked"
    } else {
        echo "Unlocked"
    }
}

# Get device hostname
def host_name_info [] {
    let host_name = (sys host | get "name")
    echo $host_name
}

# Get kernel version information
def kernel_info [] {
    let kernel_release = (uname | get "kernel-release")
    echo $kernel_release
}

# Get Android SDK version
def sdk_info [] {
    let sdk_version = (getprop ro.build.version.sdk)
    echo $sdk_version
}

# Get Android version information
def version_info [
    --show_version # Include version number
    --show_time # Include security patch date
] {
    mut output_str = ""
    if $show_version { $output_str += $"Android (getprop ro.build.version.release)" }
    if $show_version and $show_time { $output_str += " " }
    if $show_time { $output_str += $"\((getprop ro.build.version.security_patch)\)" }
    echo $output_str
}

# Get device CPU architecture
def architecture_info [] {
    let architecture = (getprop ro.product.cpu.abi)
    echo $architecture
}

# Get CPU model information
def cpu_info [] {
    let output = (LANG=C lscpu)

    let cpu_list = $output | lines
    | filter { |line| $line =~ "Model name:" }
    | parse -r '^\s*Model name:\s+(.*)'
    | get capture0

    echo $cpu_list
}

# Get total memory information
def memory_info [] {
    open /proc/meminfo | grep MemTotal | awk '{printf "%.2f GB", $2/1024/1024}'
}

# Get device locale settings
def locale_info [] {
    mut lang = (getprop persist.sys.locale)
    if $lang == "" {
        $lang = (getprop ro.product.locale)
    }
    if $lang == "" {
        $lang = "en-US"
    }
    echo $lang
}

# Get current shell information
def get_shell [] {
    mut shell = ($env | get "shell"? | default "/system/bin/sh") # $SHELL may not exist, defaulting to /system/bin/sh
    let shell_path = $shell | split row "/"
    let path_len = $shell_path | length

    echo $shell_path | last
}

# Generate colored text for terminal output
def color_info [
    type # Color type (normal/bright)
    printable_space # Available space for coloring
    color_string = "   " # String to colorize
    --fg # Use foreground colors instead of background
] {
    if $printable_space <= 0 {
        return ""
    }

    let len = ($color_string | str length)
    let t = if $type == "bright" { if $fg { 9 } else { 10 } } else { if $fg { 3 } else { 4 } }
            
    mut text = ""
    for $j in 0..($len * 8 - 1) {
        let char = $color_string | split chars | get ($j mod $len)
        if $j >= $printable_space { break }
        $text += $"\e[($t)($j / $len | math floor)m($char)\e[0m"
    }

    echo $text
}

# Print underline characters
def print_underline [
    times # Number of underline characters to print
] {
    if $times <= 0 {
        return ""
    }

    for _ in 1..$times {
        print -n "-"
    }
}

# Get first N characters from string
def get_first_n_chars [
    in_str # Input string
    n # Number of characters to get
] {
    if $n < 0 {
        return ""
    }

    echo $in_str | str substring ..$n
}

# Collect all system information into a table
def get_info_list [] {
    echo {
        Brand: (brand_info)
        Mfr: (mfr_info)
        Host: (host_name_info)
        Version: (version_info --show_version --show_time)
        Kernel: (kernel_info)
        Sdk: (sdk_info)
        Bootloader: (locked_info)
        Rooted: (rooted_info)
        Locale: (locale_info)
        Shell: (get_shell)
        Architecture: (architecture_info)
        "CPU Model": (cpu_info)
        Memory: (memory_info)
    }
}

# Display system information with formatting
def show_info [
    display_icon # Icon to display
    show_icon_info # Table with icon/info display flags
    is_json # Output in JSON format
    indentation # JSON indentation level
    info_space # Spacing between icon and info
] {
    let terminal_columns = term size | get "columns"
    let colors = get_ascii_colors $display_icon
    let icon = $"(get_ascii_icon $display_icon)"

    mut info_list = (get_info_list)

    if $is_json == false {
        mut icon_len = ($icon | split row "\n" | length)
        mut icon_wid = ($icon | split row "\n" | last | str length)
        mut space = $info_space

        if $show_icon_info.icon {
        } else {
            $icon_len = 0
            $icon_wid = 0
            $space = 0
        }

        $info_list = $info_list | update "CPU Model" (
            $info_list | get "CPU Model" | str join ", "
        )
        
        if $show_icon_info.icon {
            print -n "\e[0;1m"
            print -n $icon
            print -n "\n"
            print -n "\e[0m"
        }

        if $show_icon_info.info {
            print -n "\e[0m"
            if $icon_len > 0 { print -n $"\e[($icon_len)A" }
            print -n $"\e[s"

            # Title
            let print_start = ($icon_wid + $space)
            let printable_space_right = ($terminal_columns - $print_start)
            let title_version_info = (version_info --show_version)
            let title_architecture_info = (architecture_info)
            let title = (get_first_n_chars $"($title_version_info)   ($title_architecture_info)" ($printable_space_right - 1))

            print -n $"\e[u"
            if $icon_wid + $space > 0 { print -n $"\e[($print_start)C" }
            print -n $"($colors.0)"
            print -n $"\e[1m"
            print -n $title
            print -n $"\e[0m"

            # Slash in version and architecture
            print -n $"\e[u"
            let slash_start = ($print_start + ($title_version_info | str length) + 1)
            if $slash_start < $terminal_columns {
                print -n $"\e[($slash_start)C"
                print -n $"\e[0m"
                print -n $"/"
            }
            print -n "\n"
            mut output_lines = 1

            # Title underline
            print -n $"\e[u"
            print -n $"\e[($output_lines)B"
            if $icon_wid + $space > 0 { print -n $"\e[($print_start)C" }
            print -n $"\e[0m"
            print_underline ([($title | str length), $printable_space_right] | math min)
            print -n "\n"
            $output_lines += 1

            # Info
            let info_list_keys = ($info_list | columns)
            for $i in 1..($info_list_keys | length) {
                let key = ($info_list_keys | get ($i - 1))
                let printable_space_value = $terminal_columns - ($print_start + ($key | str length) + 2)
                let printable_space_key = ($printable_space_right - 1)
                let key_str = (get_first_n_chars $key $printable_space_key)
                let value_str = (get_first_n_chars $": ($info_list | get $key)" ($printable_space_value + 1))

                print -n $"\e[u"
                print -n $"\e[($output_lines)B"
                if $icon_wid + $space > 0 { print -n $"\e[($print_start)C" } # The 'if' is needed because ESC[?C moves the cursor 1 character even when the parameter is 0
                print -n $"($colors.0)"
                print -n $"\e[1m"
                print -n $"($key_str)"
                print -n $"\e[0m"
                print -n $"($value_str)"
                print -n $"\n"
                $output_lines += 1
            }

            # Empty line between info and color display
            print -n "\n"
            $output_lines += 1

            # Color display
            for $i in 1..2 {
                let color_type = if $i == 1 { "normal" } else { "bright" }
                print -n $"\e[u"
                print -n $"\e[($output_lines)B"
                if $icon_wid + $space > 0 { print -n $"\e[($print_start)C" }
                print -n $"(color_info $color_type $printable_space_right)"
                print -n $"\n"
                $output_lines += 1
            }

            if $icon_len > $output_lines {
                print -n $"\e[u"
                print -n $"\e[($icon_len)B" # Move the cursor back to the bottom
            } else {
                print -n "\n"
            }
        }
    } else {
        mut icon_with_x1b = $icon | str replace "\e" "\\x1b" --all

        let show_info = if $show_icon_info.icon and $show_icon_info.info {
            echo {
                icon: $icon_with_x1b
                ...$info_list
            }
        } else if $show_icon_info.info {
            echo {
                ...$info_list
            }
        } else if $show_icon_info.icon {
            echo {
                icon: $icon_with_x1b
            }
        } else echo { }

        print ($show_info | to json -i $indentation)
    }
    print -n "\e[0m"
}

# System Fetch Tool for Android.
def main [
    --icon: string (-i)         # Specify the ASCII icon to display
    --hide_icon                 # Hide the ASCII icon and only show information
    --hide_info                 # Hide information and only display the ASCII icon
    --version (-v)              # Display the version
    --json (-j)                 # Display in JSON format
    --indentation: int = 4 (-I) # JSON Display indentation level
    --space: int = 4 (-s)       # The spacing between the ASCII icon and the information
]: any -> string {
    if $version {
        print $andfetch_version
        exit 0
    }

    let os_name = $nu.os-info.name
    if (uname | get "operating-system") != "Android" {
        error make -u {
            msg: "This script is only allowed to run on Android."
        }
    }

    if $space < 0 {
        error make -u {
            msg: "The value of --space must be >= 0."
        }
    }

    if $indentation < 0 {
        error make -u {
            msg: "The value of --indentation must be >= 0."
        }
    }

    mut display_icon = (brand_info)

    if $icon != null {
        $display_icon = $icon
    }
    
    mut show_icon_info = {
        icon: true
        info: true
    }

    if $hide_icon {
        $show_icon_info.icon = false
    }

    if $hide_info {
        $show_icon_info.info = false
    }

    show_info $display_icon $show_icon_info $json $indentation $space
}
